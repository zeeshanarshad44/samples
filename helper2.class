package scripts;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import kotlin.Metadata;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import org.tribot.api.Timing;
import org.tribot.api.input.Keyboard;
import org.tribot.api2007.Banking;
import org.tribot.api2007.Game;
import org.tribot.api2007.Interfaces;
import org.tribot.api2007.Inventory;
import org.tribot.api2007.Player;
import org.tribot.api2007.Skills;
import org.tribot.api2007.Skills.SKILLS;
import org.tribot.api2007.types.RSInterfaceChild;
import org.tribot.api2007.types.RSItem;
import org.tribot.script.Script;
import org.tribot.script.ScriptManifest;
import org.tribot.script.interfaces.Painting;
import java.util.Random;

@ScriptManifest(
        authors = {"Powa", "IM4EVER12C"},
        category = "Fletching",
        name = "Master Open Source Fletcher"
)
@Metadata(
        mv = {1, 1, 18},
        bv = {1, 0, 3},
        d1 = {"\u0000Z\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0011\n\u0002\b\u0003\n\u0002\u0010\t\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\b\n\u0002\u0010\f\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u0007\u0018\u00002\u00020\u00012\u00020\u0002B\u0005¢\u0006\u0002\u0010\u0003J\b\u0010\u001a\u001a\u00020\u001bH\u0002J\b\u0010\u001c\u001a\u00020\bH\u0002J\b\u0010\u001d\u001a\u00020\u001bH\u0002J\b\u0010\u001e\u001a\u00020\u001bH\u0002J\b\u0010\u001f\u001a\u00020\u0014H\u0002J\b\u0010 \u001a\u00020\u0005H\u0002J\b\u0010!\u001a\u00020\u001bH\u0002J\u0018\u0010\"\u001a\u00020\u001b2\u0006\u0010#\u001a\u00020$2\u0006\u0010%\u001a\u00020\u0005H\u0002J\b\u0010&\u001a\u00020\bH\u0002J\u0010\u0010'\u001a\u00020\u001b2\u0006\u0010(\u001a\u00020)H\u0016J\b\u0010*\u001a\u00020\u001bH\u0016R\u000e\u0010\u0004\u001a\u00020\u0005X\u0082\u000e¢\u0006\u0002\n\u0000R\u001e\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b0\u0007j\b\u0012\u0004\u0012\u00020\b`\tX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u0005X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u000b\u001a\u00020\u0005X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\f\u001a\u00020\u0005X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\r\u001a\u00020\bX\u0082D¢\u0006\u0002\n\u0000R\u000e\u0010\u000e\u001a\u00020\bX\u0082D¢\u0006\u0002\n\u0000R\u0016\u0010\u000f\u001a\b\u0012\u0004\u0012\u00020\b0\u0010X\u0082\u000e¢\u0006\u0004\n\u0002\u0010\u0011R\u000e\u0010\u0012\u001a\u00020\u0005X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0013\u001a\u00020\u0014X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0015\u001a\u00020\u0016X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0017\u001a\u00020\u0018X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0019\u001a\u00020\u0014X\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006+"},
        d2 = {"Lscripts/BeyondBowFletcher;", "Lorg/tribot/script/Script;", "Lorg/tribot/script/interfaces/Painting;", "()V", "amountCut", "", "bowToFletch", "Ljava/util/ArrayList;", "", "Lkotlin/collections/ArrayList;", "fLvl", "fletchingExpBefore", "fletchingLevelBefore", "knife", "knifeA", "log", "", "[Ljava/lang/String;", "logCounter", "rand", "", "rnds", "Lkotlin/ranges/IntRange;", "shouldRun", "", "startTime", "bankProcess", "", "bowType", "cutting", "errorMessage", "fletch", "gainedXp", "getTotalFletched", "kP", "char", "", "int", "logType", "onPaint", "g", "Ljava/awt/Graphics;", "run", "test12"}
)
public final class BeyondBowFletcher extends Script implements Painting {
    private boolean shouldRun = true;
    private final long startTime = System.currentTimeMillis();
    private int fletchingLevelBefore;
    private int fletchingExpBefore;
    private int amountCut;
    private int logCounter;
    private final String knife = "Knife";
    private final int fLvl;
    private final String[] log;
    private final ArrayList bowToFletch;

    public void onPaint(@NotNull Graphics g) {
        Intrinsics.checkParameterIsNotNull(g, "g");
        long timeRan = System.currentTimeMillis() - this.startTime;
        int alpha = 127;
        int alpha2 = 186;
        Color myColour = new Color(150, 150, 150, alpha);
        Color myColour2 = new Color(1, 1, 125, alpha2);
        g.setColor(myColour);
        g.fillRect(5, 250, 510, 90);
        g.setColor(myColour2);
        g.setFont(new Font("Calibri", Font.BOLD, 24));
        g.drawString("Powagressive Open Source Fletcher", 20, 280);
        g.setFont(new Font("Calibri", Font.BOLD, 16));
        g.setColor(Color.yellow);
        g.drawString("| Bows Fletched: " + this.amountCut, 280, 315);
        g.drawString("| Current Cut: " + this.bowType(), 10, 315);
        g.drawString("| Fletching Level: " + SKILLS.FLETCHING.getActualLevel() + " (" + (SKILLS.FLETCHING.getActualLevel() - this.fletchingLevelBefore) + ")", 10, 300);
        g.drawString("| Experience Gained: " + this.gainedXp(), 280, 300);
        g.drawString("| Time Elapsed: " + Timing.msToString(timeRan), 10, 330);
    }

    public void run() {
        if (this.fletchingLevelBefore < 1) {
            this.fletchingLevelBefore = SKILLS.FLETCHING.getActualLevel();
        }

        while(this.shouldRun) {
            this.sleep(this.fletch());
        }

        this.errorMessage();
    }

    private void kP(char var1, int var2) {
        Keyboard.sendPress(var1, var2);
    }

    private void getTotalFletched() {
        if (this.logCounter == 0) {
            this.logCounter = Inventory.getCount(this.logType());
        } else if (Inventory.getCount(this.logType()) < this.logCounter) {
            ++this.amountCut;
            this.logCounter = Inventory.getCount(this.logType());
        }

    }

    private int gainedXp() {
        if (this.fletchingExpBefore < 1) {
            this.fletchingExpBefore = SKILLS.FLETCHING.getXP();
        }

        return SKILLS.FLETCHING.getXP() - this.fletchingExpBefore;
    }

    private String bowType() {
        int var1 = this.fLvl;
        String var10000;
        Object var3;
        if (0 <= var1) {
            if (9 >= var1) {
                var3 = this.bowToFletch.get(0);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[0]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (10 <= var1) {
            if (19 >= var1) {
                var3 = this.bowToFletch.get(1);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[1]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (20 <= var1) {
            if (24 >= var1) {
                var3 = this.bowToFletch.get(2);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[2]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (25 <= var1) {
            if (29 >= var1) {
                var3 = this.bowToFletch.get(3);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[3]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (30 <= var1) {
            if (34 >= var1) {
                var3 = this.bowToFletch.get(4);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[4]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (35 <= var1) {
            if (49 >= var1) {
                var3 = this.bowToFletch.get(5);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[5]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (50 <= var1) {
            if (54 >= var1) {
                var3 = this.bowToFletch.get(6);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[6]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (55 <= var1) {
            if (69 >= var1) {
                var3 = this.bowToFletch.get(7);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[7]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (70 <= var1) {
            if (84 >= var1) {
                var3 = this.bowToFletch.get(8);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[8]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        if (85 <= var1) {
            if (99 >= var1) {
                var3 = this.bowToFletch.get(9);
                Intrinsics.checkExpressionValueIsNotNull(var3, "bowToFletch[9]");
                var10000 = (String)var3;
                return var10000;
            }
        }

        var10000 = "You're not in runescape anymore";
        return var10000;
    }

    private String logType() {
        int var1 = this.fLvl;
        String var10000;
        if (0 <= var1) {
            if (19 >= var1) {
                var10000 = this.log[0];
                return var10000;
            }
        }

        if (20 <= var1) {
            if (29 >= var1) {
                var10000 = this.log[1];
                return var10000;
            }
        }

        if (30 <= var1) {
            if (49 >= var1) {
                var10000 = this.log[2];
                return var10000;
            }
        }

        if (50 <= var1) {
            if (69 >= var1) {
                var10000 = this.log[3];
                return var10000;
            }
        }

        if (70 <= var1) {
            if (84 >= var1) {
                var10000 = this.log[4];
                return var10000;
            }
        }

        if (84 <= var1) {
            if (99 >= var1) {
                var10000 = this.log[5];
                return var10000;
            }
        }

        var10000 = "Kansas";
        return var10000;
    }

    private void bankProcess() {
        if (Inventory.getCount(this.logType()) < 1) {
            if (!Banking.isBankLoaded()) {
                Banking.openBankBanker();
            } else {
                Banking.depositAllExcept(this.knife);
                if (Inventory.getCount(this.logType()) < 1) {
                    Banking.withdraw(27, this.logType());
                }

                if (Inventory.getCount(this.knife) < 1) {
                    Banking.withdraw(1, "Knife");
                }
            }
        } else if (!Banking.isBankLoaded()) {
            Banking.close();
        }

    }

    private void cutting() {
        if (Inventory.getCount(logType()) >= 1 && Inventory.getCount(this.knife) >= 1) {
            if (Banking.isBankLoaded()) {
                Banking.close();
            }

            RSItem[] myKnife = Inventory.find(this.knife);
            RSItem[] myLogType = Inventory.find(this.logType());
            if (Player.getAnimation() == -1) {
                if (Game.getSelectedItemName().contains(knife)) {
                    myKnife[0].click("Use");
                }
            }

                if (!ArraysKt.contains(this.log, Game.getSelectedItemName())) {
                    String knifeA = "Knife ->";
                    if (Game.getSelectedItemName().contains(knifeA)) {
                        int amt;
                        int nxt;
                        amt = Inventory.getCount(this.logType());
                        nxt = (int) (Math.random() * (double) (amt));
                        myLogType[nxt].click();
                        this.sleep(600,1337);
                    }
                }

                if (Interfaces.isInterfaceValid(270) && Interfaces.isInterfaceSubstantiated(270, 16)) {
                    RSInterfaceChild rsInterfaceChildOption1 = Interfaces.get(270, 14);
                    RSInterfaceChild rsInterfaceChildOption2 = Interfaces.get(270, 15);
                    RSInterfaceChild rsInterfaceChildOption3 = Interfaces.get(270, 16);
                    RSInterfaceChild rsInterfaceChildOption4 = Interfaces.get(270, 17);
                    RSInterfaceChild rsInterfaceChildOption5 = Interfaces.get(270, 18);
                    if (rsInterfaceChildOption1.getComponentName().toLowerCase().contains(bowType())) {
                        this.kP('1', 49);
                    } else if (rsInterfaceChildOption2.getComponentName().toLowerCase().contains(bowType())) {
                        this.kP('2', 50);
                    } else if (rsInterfaceChildOption3.getComponentName().toLowerCase().contains(bowType())) {
                        this.kP('3', 51);
                    } else if (rsInterfaceChildOption4.getComponentName().toLowerCase().contains(bowType())) {
                        this.kP('4', 52);
                    } else if (rsInterfaceChildOption5.getComponentName().toLowerCase().contains(bowType())) {
                        this.kP('5', 53);
                    }

                this.sleep(600,1337);
            }
        } else {
            this.bankProcess();
        }

    }

    private void errorMessage() {
        boolean var10001;
        if (Inventory.getCount(this.logType()) < 1) {
            this.println("No logs to fletch. Stopping script.");
            var10001 = false;
        } else if (Inventory.getCount(this.knife) < 1) {
            this.println("No knife found. Stopping script.");
            var10001 = false;
        } else {
            this.println("Unknown Error");
            var10001 = false;
        }

        this.shouldRun = var10001;
    }
    private int getRandomNumberInRange() {

        Random r = new Random();
        return r.nextInt((1337 - 600) + 1) + 600;
    }

    private int fletch() {
        this.getTotalFletched();
        this.cutting();
        return getRandomNumberInRange();
    }


    public BeyondBowFletcher() {
        this.fLvl = Skills.getActualLevel(SKILLS.FLETCHING);
        this.log = new String[]{"Logs", "Oak Logs", "Willow logs", "Maple logs", "Yew logs", "Magic logs"};
        this.bowToFletch = CollectionsKt.arrayListOf("arrow shafts", "Longbow", "Oak shortbow", "Oak longbow", "Willow shortbow", "Willow longbow", "Maple shortbow", "Maple longbow", "Yew longbow", "Magic longbow");
    }
}
